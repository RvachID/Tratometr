<?php

namespace app\controllers;

use Yii;
use yii\web\Controller;
use yii\web\Response;
use yii\web\UploadedFile;
use yii\web\NotFoundHttpException;
use yii\web\BadRequestHttpException;
use app\models\PriceEntry;

class ScanController extends Controller
{
    public $enableCsrfValidation = true;

    public function beforeAction($action)
    {
        if (Yii::$app->user->isGuest) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            Yii::$app->response->statusCode = 401;
            Yii::$app->end(json_encode(['success' => false, 'error' => '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω']));
        }
        if ($action->id === 'upload') {
            Yii::$app->request->enableCsrfValidation = false;
        }
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON; // üí• –í–û–¢ –≠–¢–û –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û

        return parent::beforeAction($action);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚Üí –æ—Ç–≤–µ—Ç
     */
    public function actionUpload()
    {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        try {
            $image = \yii\web\UploadedFile::getInstanceByName('image');
            if (!$image) {
                return ['success' => false, 'error' => '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'];
            }

            $tmpPath = Yii::getAlias('@runtime/' . uniqid('scan_') . '.' . $image->extension);
            if (!$image->saveAs($tmpPath)) {
                return ['success' => false, 'error' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'];
            }

            // –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–Ω–∞ –º–µ—Å—Ç–µ¬ª
            if (!$this->preprocessImage($tmpPath)) {
                @unlink($tmpPath);
                return ['success' => false, 'error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'];
            }

            // –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 1 –ú–ë
            if (filesize($tmpPath) > 1024*1024) {
                @unlink($tmpPath);
                return ['success' => false, 'error' => '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –ú–ë'];
            }

            // —Ä–∞—Å–ø–æ–∑–Ω–∞—ë–º
            $recognizedData = $this->recognizeText($tmpPath);
            @unlink($tmpPath);

            if (isset($recognizedData['error'])) {
                return [
                    'success' => false,
                    'error'   => $recognizedData['error'],
                    'debug'   => $recognizedData['full_response'] ?? '–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π',
                ];
            }

            if (empty($recognizedData['ParsedText'])) {
                return ['success' => false, 'error' => '–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω'];
            }

            $amount = $this->extractAmountByOverlay($recognizedData);
            if ($amount === null) {
                // fallback –ø–æ —Ç–µ–∫—Å—Ç—É, –µ—Å–ª–∏ Overlay –Ω–µ –ø–æ–º–æ–≥
                $amount = $this->extractAmount($recognizedData['ParsedText']);
            }
            if (!$amount) {
                return ['success' => false, 'error' => '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É'];
            }

            $entry = new \app\models\PriceEntry([
                'user_id'         => Yii::$app->user->id,
                'amount'          => $amount,
                'qty'             => 1,
                'recognized_text' => $recognizedData['ParsedText'],
                'source'          => 'price_tag',
                'created_at'      => time(),
                'updated_at'      => time(),
            ]);

            if (!$entry->save()) {
                return ['success' => false, 'error' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'details' => $entry->errors];
            }

            return [
                'success'  => true,
                'text'     => $recognizedData['ParsedText'],
                'amount'   => $amount,
                'entry_id' => $entry->id,
            ];

        } catch (\Throwable $e) {
            Yii::error($e->getMessage(), __METHOD__);
            return ['success' => false, 'error' => '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 'debug' => $e->getMessage()];
        }
    }


    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã / –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ / –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    public function actionUpdate($id)
    {
        Yii::$app->response->format = Response::FORMAT_JSON;

        $entry = PriceEntry::findOne(['id' => $id, 'user_id' => Yii::$app->user->id]);
        if (!$entry) {
            throw new NotFoundHttpException('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        $entry->load(Yii::$app->request->post(), '');
        if ($entry->save()) {
            return ['ok' => true];
        } else {
            return ['ok' => false, 'errors' => $entry->getErrors()];
        }
    }

    /**
     * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OCR API
     */
    private function recognizeText($filePath)
    {
        $apiKey = 'K84434625588957';
        $client = new \GuzzleHttp\Client();

        try {
            $response = $client->request('POST', 'https://api.ocr.space/parse/image', [
                'headers' => ['apikey' => $apiKey],
                'multipart' => [
                    ['name' => 'file', 'contents' => fopen($filePath, 'r')],
                    ['name' => 'language', 'contents' => 'rus'],
                    ['name' => 'isOverlayRequired', 'contents' => 'true'],
                ],
            ]);

            $body = json_decode($response->getBody(), true);

            // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –ª–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            $logPath = Yii::getAlias('@runtime/ocr_raw_response.json');
            file_put_contents($logPath, json_encode($body, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ ParsedResults
            if (!isset($body['ParsedResults'][0])) {
                return [
                    'error' => '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è',
                    'full_response' => $body,
                ];
            }

            return $body['ParsedResults'][0];
        } catch (\Throwable $e) {
            // ‚ö†Ô∏è –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            Yii::error($e->getMessage(), __METHOD__);
            return [
                'error' => '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: ' . $e->getMessage(),
            ];
        }
    }

    /**
     * –ë–µ—Ä—ë–º —á–∏—Å–ª–æ –∏–∑ OCR Overlay –ø–æ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É "—à—Ä–∏—Ñ—Ç—É" (Height).
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –∏–ª–∏ null, –µ—Å–ª–∏ –≤ Overlay –Ω–∏—á–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ.
     */
    private function extractAmountByOverlay(array $recognizedData): ?float
    {
        $lines = $recognizedData['TextOverlay']['Lines'] ?? null;
        if (!$lines || !is_array($lines)) {
            return null;
        }

        $bestScore = -1.0;
        $bestValue = null;

        foreach ($lines as $line) {
            foreach (($line['Words'] ?? []) as $w) {
                $token = (string)($w['WordText'] ?? '');
                $height = isset($w['Height']) ? (float)abs($w['Height']) : 0.0;
                if ($height <= 0) continue;

                $val = $this->normalizeOcrNumber($token);
                if ($val === null) continue;

                // –≤–µ—Å = –≤—ã—Å–æ—Ç–∞ —à—Ä–∏—Ñ—Ç–∞; –Ω–µ–±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∫–æ–ø–µ–µ–∫
                $score = $height;
                if (preg_match('/[.,]\d{2}\b/u', $token)) {
                    $score += $height * 0.4;
                }

                if ($score > $bestScore) {
                    $bestScore = $score;
                    $bestValue = $val;
                }
            }
        }

        return $bestValue;
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ¬´—á–∏—Å–ª–æ–≤–æ–µ¬ª —Å–ª–æ–≤–æ –∏–∑ OCR –≤ float.
     * –ß–∏–Ω–∏–º: '449 99' / '449,99' / '449¬∑99' / '1 299,90' / '44999' ‚Üí 449.99.
     * –û—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã/–¥—Ä–æ–±–∏, –º—É—Å–æ—Ä –∏ –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
     */
    private function normalizeOcrNumber(string $s): ?float
    {
        $s = trim($s);
        if ($s === '' || preg_match('/[%\/]/u', $s)) return null; // –æ—Ç—Å–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥—Ä–æ–±–∏

        // —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã ‚Üí –æ–±—ã—á–Ω—ã–π
        $s = str_replace(["\xC2\xA0", '‚Äâ', ' '], ' ', $s);

        // –ø–æ–º–µ—á–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ø–µ–µ–∫ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ (–ø–µ—Ä–µ–¥ —Ä–æ–≤–Ω–æ 2 —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ ¬´—Å–ª–æ–≤–∞¬ª)
        $s = preg_replace('/(?<=\d)[\s,\.¬∑‚Ä¢](?=\d{2}\b)/u', '#', $s);

        // —É–±–∏—Ä–∞–µ–º —Ç—ã—Å—è—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (–ø—Ä–æ–±–µ–ª/—Ç–æ—á–∫–∞/—Ü–µ–Ω—Ç.—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥ 3 —Ü–∏—Ñ—Ä–∞–º–∏)
        $s = preg_replace('/(?<=\d)[\s\.¬∑‚Ä¢](?=\d{3}\b)/u', '', $s);

        // —á–∏—Å—Ç–∏–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏
        $s = preg_replace('/(?<=\d)\s+(?=\d)/u', '', $s);

        // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ø–µ–µ–∫ ‚Äî —Ç–æ—á–∫–∞
        $s = str_replace('#', '.', $s);

        // –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: —Ü–µ–ª–æ–µ –∏–ª–∏ —Å –∫–æ–ø–µ–π–∫–∞–º–∏
        if (preg_match('/^\d+(?:\.\d{1,2})?$/', $s)) {
            $v = (float)$s;
            return ($v > 0 && $v <= 99999) ? $v : null;
        }

        // –µ—Å–ª–∏ OCR ¬´—Å—ä–µ–ª¬ª —Ç–æ—á–∫—É: 4‚Äì6 —Ü–∏—Ñ—Ä –∫–∞–∫ –∫–æ–ø–µ–π–∫–∏ (44999 ‚Üí 449.99)
        if (preg_match('/^\d{4,6}$/', $s)) {
            $n = (int)$s;
            $v = $n / 100.0;
            return ($v > 0 && $v <= 99999) ? $v : null;
        }

        // –ø—Ä–æ—Å—Ç–æ —Ü–µ–ª–æ–µ: –¥–æ–ø—É—Å—Ç–∏–º
        if (preg_match('/^\d+$/', $s)) {
            $v = (float)$s;
            return ($v > 0 && $v <= 99999) ? $v : null;
        }

        return null;
    }

    /**
     * –£–º–Ω—ã–π —Ä–∞–∑–±–æ—Ä —Å—É–º–º—ã –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
     * –ü—Ä–∞–≤–∏—Ç '449 99' / '449,99' ‚Üí '449.99', —É–±–∏—Ä–∞–µ—Ç —Ç—ã—Å—è—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏,
     * –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ø–µ–π–∫–∏ –∏–∑ 4‚Äì6-–∑–Ω–∞—á–Ω—ã—Ö —Ü–µ–ª—ã—Ö (44999 ‚Üí 449.99).
     */
    private function extractAmount(string $text): float
    {
        // 1) –ü—Ä–∏–≤–µ–¥—ë–º –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã –∫ –æ–±—ã—á–Ω—ã–º
        $text = str_replace(
            ["\xC2\xA0", ' ', '‚Äâ', 'Ôªø'], // NBSP, thin space, hair space, BOM
            ' ',
            $text
        );

        // 2) –ü–æ–º–µ—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ø–µ–µ–∫ (–º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏ –ø–µ—Ä–µ–¥ —Ä–æ–≤–Ω–æ 2 —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ "—Å–ª–æ–≤–∞")
        // 449 99 / 449,99 / 449¬∑99 / 449‚Ä¢99  -> 449#99
        $tmp = preg_replace('/(?<=\d)[\s,\.¬∑‚Ä¢](?=\d{2}\b)/u', '#', $text);

        // 3) –£–±–∏—Ä–∞–µ–º —Ç—ã—Å—è—á–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞ (–ø—Ä–æ–±–µ–ª—ã/—Ç–æ—á–∫–∏/—Ç–æ–Ω–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ 3 —Ü–∏—Ñ—Ä–∞–º–∏)
        $tmp = preg_replace('/(?<=\d)[\s\.¬∑‚Ä¢](?=\d{3}\b)/u', '', $tmp);

        // 4) –£–¥–∞–ª–∏–º –ª—é–±—ã–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞
        $tmp = preg_replace('/(?<=\d)\s+(?=\d)/u', '', $tmp);

        // 5) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—á–∫—É –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–æ–ø–µ–µ–∫
        $normalized = str_replace('#', '.', $tmp);

        // --- –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —á–∏—Å–ª–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏
        if (preg_match_all('/\d+(?:\.\d{1,2})/', $normalized, $m1)) {
            $candidates = array_map('floatval', $m1[0]);
            // –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã (1..99999), –≤–æ–∑—å–º—ë–º –º–∞–∫—Å–∏–º—É–º
            $candidates = array_filter($candidates, fn($v) => $v >= 0.01 && $v <= 99999);
            if (!empty($candidates)) {
                return max($candidates);
            }
        }

        // --- –ï—Å–ª–∏ –∫–æ–ø–µ–µ–∫ –Ω–∏–≥–¥–µ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –∏–∑ —Ü–µ–ª—ã—Ö 4‚Äì6-–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª
        if (preg_match_all('/\d{3,6}/', $normalized, $m2)) {
            $best = 0.0;
            foreach ($m2[0] as $raw) {
                $n = (int)$raw;

                // –ö–∞–Ω–¥–∏–¥–∞—Ç –∫–∞–∫ –µ—Å—Ç—å (—Ü–µ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ü–µ–ª–æ–π)
                $asIs = (float)$n;

                // –ö–∞–Ω–¥–∏–¥–∞—Ç –∫–∞–∫ —Ü–µ–Ω–∞ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã ‚Äî –∫–æ–ø–µ–π–∫–∏), —Ç–æ–ª—å–∫–æ –¥–ª—è 4‚Äì6 –∑–Ω–∞–∫–æ–≤
                $asCents = ($n >= 1000 && $n <= 999999) ? $n / 100.0 : 0.0;

                // –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                foreach ([$asIs, $asCents] as $val) {
                    if ($val >= 0.01 && $val <= 99999 && $val > $best) {
                        $best = $val;
                    }
                }
            }
            if ($best > 0) {
                return $best;
            }
        }

        return 0.0;
    }


    /**
     * –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Ä–µ—Å–∞–π–∑, —á/–±, –∫–æ–Ω—Ç—Ä–∞—Å—Ç
     */
    private function preprocessImage(string $filePath): bool
    {
        Yii::info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—á–∞—Ç–∞', __METHOD__);
        try {
            $image = new \Imagick($filePath);
            $image->setImageFormat('jpeg');

            // —Ä–µ—Å–∞–π–∑ –ø–æ —à–∏—Ä–∏–Ω–µ –¥–æ 1024
            $width = $image->getImageWidth();
            if ($width > 1024) {
                $image->resizeImage(1024, 0, \Imagick::FILTER_LANCZOS, 1);
            }

            // –ß/–ë + –∫–æ–Ω—Ç—Ä–∞—Å—Ç/—è—Ä–∫–æ—Å—Ç—å/—Ä–µ–∑–∫–æ—Å—Ç—å
            $image->setImageColorspace(\Imagick::COLORSPACE_GRAY);
            $image->setImageType(\Imagick::IMGTYPE_GRAYSCALE);
            $image->sigmoidalContrastImage(true, 10, 0.5);
            $image->modulateImage(120, 100, 100);
            $image->sharpenImage(2, 1);

            // –æ–±—Ä–µ–∑–∫–∞ 5% –ø–æ –∫—Ä–∞—è–º
            $w = $image->getImageWidth();
            $h = $image->getImageHeight();
            $cropX = (int)($w * 0.05);
            $cropY = (int)($h * 0.05);
            $image->cropImage($w - 2*$cropX, $h - 2*$cropY, $cropX, $cropY);
            $image->setImagePage(0, 0, 0, 0);

            $ok = $image->writeImage($filePath);
            $image->clear();
            $image->destroy();

            Yii::info('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', __METHOD__);
            return $ok;
        } catch (\Throwable $e) {
            Yii::error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '.$e->getMessage(), __METHOD__);
            return false;
        }
    }


}
