// scanner.js
(function () {
    const { getCsrf, fmt2, resetPhotoPreview } = window.Utils;

    // ===== DOM =====
    const startBtn   = document.getElementById('start-scan');
    const wrap       = document.getElementById('camera-wrapper');
    const video      = document.getElementById('camera');
    const captureBtn = document.getElementById('capture');
    const previewImg = document.getElementById('preview-image');
    const manualBtn  = document.getElementById('manual-add');

    const btnTextEl    = captureBtn?.querySelector('.btn-text') || captureBtn;
    const btnSpinnerEl = captureBtn?.querySelector('.spinner');

    // ===== –ú–æ–¥–∞–ª–∫–∞ =====
    const scanModalEl   = document.getElementById('scanModal');
    const mAmountEl     = document.getElementById('m-amount');
    const mQtyEl        = document.getElementById('m-qty');
    const mQtyMinusEl   = document.getElementById('m-qty-minus');
    const mQtyPlusEl    = document.getElementById('m-qty-plus');
    const mNoteEl       = document.getElementById('m-note');

    // –ö–Ω–æ–ø–∫–∏ –º–æ–¥–∞–ª–∫–∏
    const mScanBtn      = document.getElementById('m-show-photo'); // —Ç–µ–ø–µ—Ä—å —ç—Ç–æ "üì∏ –°–∫–∞–Ω"
    const mCancelBtn    = document.getElementById('m-ocr-cancel'); // "‚úñ –û—Ç–º–µ–Ω–∞" (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const mPhotoWrap    = document.getElementById('m-photo-wrap');
    const mPhotoImg     = document.getElementById('m-photo');
    const mRetakeBtn    = document.getElementById('m-retake');
    const mSaveBtn      = document.getElementById('m-save');

    let bootstrapModal = scanModalEl ? new bootstrap.Modal(scanModalEl) : null;
    let selectOnFocusNext = false;

// –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π focus –ø—Ä–æ–∏–∑–æ—à—ë–ª –∏–∑ —Ç–∞–ø–∞/–∫–ª–∏–∫–∞
    mAmountEl?.addEventListener('pointerdown', () => { selectOnFocusNext = true; });
    mAmountEl?.addEventListener('mousedown',   () => { selectOnFocusNext = true; });
    mAmountEl?.addEventListener('touchstart',  () => { selectOnFocusNext = true; }, { passive: true });

// –ø—Ä–∏ —Å–∞–º–æ–º —Ñ–æ–∫—É—Å–µ ‚Äî –≤—ã–¥–µ–ª—è–µ–º –≤—Å—ë –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    mAmountEl?.addEventListener('focus', (e) => {
        if (selectOnFocusNext) {
            e.target.select();           // –≤—Å—è —Å—É–º–º–∞ –≤—ã–¥–µ–ª–µ–Ω–∞ ‚Üí –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ —Å—Ä–∞–∑—É –∑–∞–º–µ–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
            selectOnFocusNext = false;
        }
    });


    // ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ =====
    let currentStream = null;
    let scanBusy = false;
    let lastPhotoURL = null;         // objectURL –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞
    let lastParsedText = '';
    let wasSaved = false;
    let cameraActive = false;
    // –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ OCR –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å blob —Å–Ω–∏–º–∫–∞
    window.mPhotoBlob = null;

    const scanRoot  = document.getElementById('scan-root');
    let   metaStore    = scanRoot?.dataset.store || '';
    let   metaCategory = scanRoot?.dataset.category || '';
    console.log('scan meta:', { metaStore, metaCategory });

    const shopModalEl  = document.getElementById('shopModal');
    const shopStoreEl  = document.getElementById('shop-store');
    const shopCatEl    = document.getElementById('shop-category');
    const shopBeginBtn = document.getElementById('shop-begin');
    let   shopModal    = (window.bootstrap && shopModalEl) ? new bootstrap.Modal(shopModalEl) : null;

    const needPrompt = scanRoot?.dataset.needPrompt === '1';
    if (needPrompt && shopModal) {
        if (metaStore)    shopStoreEl.value = metaStore;     // –ø—Ä–µ—Ñ–∏–ª–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (metaCategory) shopCatEl.value   = metaCategory;
        shopModal.show();
    }

    function updateScanTitle() {
        const h2 = document.getElementById('scan-title');
        if (!h2) return;
        const cat = scanRoot?.dataset.category || metaCategory || '';
        const sto = scanRoot?.dataset.store || metaStore || '';
        if (cat || sto) {
            h2.textContent = `–ü–æ–∫—É–ø–∞–µ–º: ${cat || '‚Äî'}. –í –º–∞–≥–∞–∑–∏–Ω–µ: ${sto || '‚Äî'}`;
        } else {
            h2.textContent = '–¢—Ä–∞—Ç–æ–º–µ—Ç—Ä';
        }
    }
    updateScanTitle();

    // ===== –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å =====
    if (startBtn) {
        startBtn.onclick = async () => {
            cameraActive = !!currentStream;
            if (!cameraActive) {
                wrap?.setAttribute('style','display:block');
                try {
                    if (!navigator.mediaDevices?.getUserMedia) {
                        alert('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
                        return;
                    }
                    await initCamera();
                    cameraActive = true;
                    startBtn.textContent = '‚úñ –ó–∞–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
                    manualBtn?.classList.add('d-none');

                    // –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–º–µ—Ä—ã —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                    document.getElementById('m-show-photo')?.removeAttribute('style');
                    document.getElementById('m-retake')?.removeAttribute('style');

                } catch (e) {
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É: ' + (e?.message || e));
                    if (wrap) wrap.style.display = 'none';
                    cameraActive = false;
                    startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
                    manualBtn?.classList.remove('d-none');
                }
            } else {
                await stopStream();
                if (wrap) wrap.style.display = 'none';
                cameraActive = false;
                startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
                manualBtn?.classList.remove('d-none');
            }
        };
    }

    // –†—É—á–Ω–æ–π –≤–≤–æ–¥
    if (manualBtn) {
        manualBtn.onclick = async () => {
            if (cameraActive) {
                await stopStream();
                if (wrap) wrap.style.display = 'none';
                cameraActive = false;
                if (startBtn) startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
            }

            mAmountEl.value = fmt2(0);
            mQtyEl.value = 1;
            mNoteEl.value = '';
            lastParsedText = '';
            window.mPhotoBlob = null;

            // –°–∫—Ä—ã—Ç—å ¬´–°–∫–∞–Ω¬ª –∏ ¬´–ü–µ—Ä–µ—Å–Ω—è—Ç—å¬ª –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            document.getElementById('m-show-photo')?.setAttribute('style','display:none');
            document.getElementById('m-retake')?.setAttribute('style','display:none');

            resetPhotoPreview(mPhotoWrap, mScanBtn, mPhotoImg);
            bootstrapModal?.show();
        };
    }

    // ===== –ö–∞–º–µ—Ä–∞ =====
    async function stopStream() {
        if (currentStream) {
            currentStream.getTracks().forEach(t => t.stop());
            currentStream = null;
        }
    }
    async function getStream(c) { return await navigator.mediaDevices.getUserMedia(c); }
    async function initCamera() {
        await stopStream();
        const primary = { video: { facingMode: { ideal: 'environment' } }, audio: false };
        try { currentStream = await getStream(primary); }
        catch { currentStream = await getStream({ video: true, audio: false }); }
        video.setAttribute('playsinline','true');
        video.srcObject = currentStream;
        await new Promise(res => {
            const h = () => { video.removeEventListener('loadedmetadata', h); res(); };
            if (video.readyState >= 1) res(); else video.addEventListener('loadedmetadata', h);
        });
        try { await video.play(); } catch {}
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
    scanModalEl?.addEventListener('hidden.bs.modal', async () => {
        resetPhotoPreview(mPhotoWrap, mScanBtn, mPhotoImg);
        if (wasSaved) {
            if (wrap) wrap.style.display = 'none';
            await stopStream();
            cameraActive = false;
            wasSaved = false;
            if (startBtn) startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
            manualBtn?.classList.remove('d-none');
        }
    });

    // ===== –°–∫–∞–Ω —Å –∫–∞–º–µ—Ä—ã + OCR (–∫–Ω–æ–ø–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    async function captureAndRecognize() {
        if (scanBusy) return;
        scanBusy = true;
        if (captureBtn) captureBtn.disabled = true;
        if (btnSpinnerEl) btnSpinnerEl.style.display = 'inline-block';
        if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
        else if (captureBtn) captureBtn.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';

        try {
            if (!video.videoWidth || !video.videoHeight) { alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞'); return; }

            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

            // –ø—Ä–æ—Å—Ç–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
            const img = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = img.data;
            for (let i=0;i<data.length;i+=4){
                const avg=(data[i]+data[i+1]+data[i+2])/3;
                const bw=avg>128?255:0;
                data[i]=data[i+1]=data[i+2]=bw;
            }
            ctx.putImageData(img,0,0);

            await new Promise((resolve)=>{
                canvas.toBlob((blob)=>{
                    try{
                        if(!blob){ alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'); return resolve(false); }

                        // —Å–æ—Ö—Ä–∞–Ω–∏–º blob –∏ objectURL –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ OCR –≤ –º–æ–¥–∞–ª–∫–µ
                        window.mPhotoBlob = blob;
                        if (lastPhotoURL) URL.revokeObjectURL(lastPhotoURL);
                        lastPhotoURL = URL.createObjectURL(blob);

                        const formData = new FormData();
                        formData.append('image', blob, 'scan.jpg');

                        const csrf = getCsrf();
                        if (!csrf){ alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'); return resolve(false); }

                        fetch('/index.php?r=scan/recognize', {
                            method:'POST', headers:{'X-CSRF-Token':csrf}, body:formData, credentials:'include'
                        })
                            .then(async r=>{
                                if (r.status===429) throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OCR-–∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                                const ct=r.headers.get('content-type')||'';
                                if (!ct.includes('application/json')) { throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON.'); }
                                return r.json();
                            })
                            .then(res=>{
                                if (!res.success) {
                                    const msg = (res.error||'').toLowerCase();
                                    if (previewImg && (msg.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É') || msg.includes('—Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞') || res.reason==='no_amount')) {
                                        previewImg.src = lastPhotoURL;
                                    }
                                    throw new Error(res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É');
                                }
                                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–∞–ª–∫–∏
                                mAmountEl.value = fmt2(res.recognized_amount);
                                mQtyEl.value = 1;
                                mNoteEl.value = '';
                                mPhotoWrap.style.display = 'none';
                                lastParsedText = res.parsed_text || '';
                                resetPhotoPreview(mPhotoWrap, mScanBtn, mPhotoImg);
                                bootstrapModal?.show();
                                resolve(true);
                            })
                            .catch(err=>{ alert(err.message); resolve(false); });
                    } catch(e){ resolve(false); }
                }, 'image/jpeg', 0.9);
            });

        } finally {
            scanBusy = false;
            if (captureBtn) captureBtn.disabled = false;
            if (btnSpinnerEl) btnSpinnerEl.style.display = 'none';
            if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = 'üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
            else if (captureBtn) captureBtn.textContent = 'üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
        }
    }

    // –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã
    if (mQtyMinusEl && mQtyPlusEl && mQtyEl) {
        mQtyMinusEl.onclick = () => {
            let v = parseFloat(mQtyEl.value || '1');
            v = Math.max(0, v - 1);
            mQtyEl.value = (v % 1 === 0) ? v.toFixed(0) : v.toFixed(3);
        };
        mQtyPlusEl.onclick = () => {
            let v = parseFloat(mQtyEl.value || '1');
            v = v + 1;
            mQtyEl.value = v.toFixed(0);
        };
    }
    if (mAmountEl) {
        mAmountEl.addEventListener('blur', () => { mAmountEl.value = fmt2(mAmountEl.value); });
    }

    // –ü–µ—Ä–µ—Å–Ω—è—Ç—å = –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ
    if (mRetakeBtn) {
        mRetakeBtn.onclick = () => { bootstrapModal?.hide(); };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑ –º–æ–¥–∞–ª–∫–∏
    if (mSaveBtn) {
        mSaveBtn.onclick = async () => {
            const csrf = getCsrf();
            const fd = new FormData();
            fd.append('amount', mAmountEl.value);
            fd.append('qty', mQtyEl.value);
            fd.append('note', mNoteEl.value);
            fd.append('parsed_text', lastParsedText);
            fd.append('store',    metaStore);
            fd.append('category', metaCategory);

            try {
                const r = await fetch('/index.php?r=scan/store', {
                    method:'POST', headers:{'X-CSRF-Token':csrf}, body:fd, credentials:'include'
                });
                const ct = r.headers.get('content-type')||'';
                if (!ct.includes('application/json')) throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON.');
                const res = await r.json();
                if (!res.success) throw new Error(res.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

                // –ï—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
                if (res.entry && typeof window.addEntryToTop === 'function') window.addEntryToTop(res.entry);
                if (typeof res.total !== 'undefined' && typeof window.updateTotal === 'function') window.updateTotal(res.total);

                wasSaved = true;
                bootstrapModal?.hide();

                if (lastPhotoURL) { URL.revokeObjectURL(lastPhotoURL); lastPhotoURL = null; }
            } catch (e) { alert(e.message); }
        };
    }

    // ===== OCR –≤ –º–æ–¥–∞–ª–∫–µ: –æ—Ç–º–µ–Ω–∞/—Ç–∞–π–º–∞—É—Ç/—Å–±—Ä–æ—Å UI =====
    const OCR_TIMEOUT_MS = 12000; // 12 —Å–µ–∫

    let ocrAbortCtrl = null;
    let ocrTimer     = null;

    function setModalOcrPending(pending) {
        if (!mScanBtn) return;
        if (pending) {
            mScanBtn.disabled = true;
            mRetakeBtn && (mRetakeBtn.disabled = true);
            mSaveBtn   && (mSaveBtn.disabled   = true);
            mScanBtn.dataset._text = mScanBtn.textContent;
            mScanBtn.innerHTML =
                '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
            mCancelBtn && mCancelBtn.classList.remove('d-none');
        } else {
            mScanBtn.disabled = false;
            mRetakeBtn && (mRetakeBtn.disabled = false);
            mSaveBtn   && (mSaveBtn.disabled   = false);
            mScanBtn.innerHTML = mScanBtn.dataset._text || 'üì∏ –°–∫–∞–Ω';
            mCancelBtn && mCancelBtn.classList.add('d-none');
        }
    }

    /** –û–±—ë—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ fetch —Å AbortController –∏ —Ö–∞—Ä–¥-—Ç–∞–π–º–∞—É—Ç–æ–º */
    async function ocrFetch(url, opts = {}) {
        if (!navigator.onLine) throw new Error('–ù–µ—Ç —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');

        const ctrl = new AbortController();
        ocrAbortCtrl = ctrl;
        opts.signal = ctrl.signal;

        setModalOcrPending(true);

        ocrTimer = setTimeout(() => {
            try { ctrl.abort('timeout'); } catch (_) {}
        }, OCR_TIMEOUT_MS);

        try {
            const res = await fetch(url, opts);
            return res;
        } finally {
            clearTimeout(ocrTimer); ocrTimer = null;
            ocrAbortCtrl = null;
            setModalOcrPending(false);
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å Blob —Å–Ω–∏–º–∫–∞ –¥–ª—è OCR: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–Ω–∏–º–æ–∫, –∏–Ω–∞—á–µ –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ
    async function getPhotoBlobForOcr() {
        if (window.mPhotoBlob instanceof Blob) {
            return window.mPhotoBlob;
        }
        if (lastPhotoURL) {
            try {
                const resp = await fetch(lastPhotoURL);
                return await resp.blob();
            } catch (_) {}
        }
        // –µ—Å–ª–∏ –∫–∞–º–µ—Ä—ã –∫–∞–¥—Ä–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—É—Ç—å null
        if (!video || !video.videoWidth || !video.videoHeight) return null;

        // —Å–Ω–∏–º–µ–º –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        return await new Promise((resolve) => {
            canvas.toBlob((b) => resolve(b || null), 'image/jpeg', 0.9);
        });
    }

    // –ö–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª (–≤ –º–æ–¥–∞–ª–∫–µ)
    mCancelBtn && (mCancelBtn.onclick = () => {
        if (ocrAbortCtrl) ocrAbortCtrl.abort('user-cancel');
    });

    // –ö–Ω–æ–ø–∫–∞ ¬´üì∏ –°–∫–∞–Ω¬ª –≤ –º–æ–¥–∞–ª–∫–µ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π OCR –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–Ω–∏–º–∫—É
    mScanBtn && (mScanBtn.onclick = async () => {
        try {
            const blob = await getPhotoBlobForOcr();
            if (!(blob instanceof Blob)) {
                alert('–ù–µ—Ç —Å–Ω–∏–º–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ—Å–Ω—è—Ç—å¬ª.');
                return;
            }

            const fd = new FormData();
            fd.append('image', blob, 'scan.jpg');

            const csrf = getCsrf();
            const r = await ocrFetch('/index.php?r=scan/recognize', {
                method: 'POST',
                headers: csrf ? {'X-CSRF-Token': csrf} : {},
                body: fd,
                credentials: 'include'
            });

            const ct = r.headers.get('content-type') || '';
            if (!ct.includes('application/json')) {
                const text = await r.text();
                throw new Error('OCR: –Ω–µ-JSON –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ' + text.slice(0, 200));
            }
            const data = await r.json();

            if (!data?.success) {
                throw new Error(data?.error || 'OCR: –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è');
            }

            // –£—Å–ø–µ—Ö: –æ–±–Ω–æ–≤–∏–º –ø–æ–ª—è –º–æ–¥–∞–ª–∫–∏
            if (typeof data.recognized_amount !== 'undefined' && mAmountEl) {
                const val = Number(data.recognized_amount);
                mAmountEl.value = isFinite(val) ? fmt2(val) : String(data.recognized_amount);
            }
            if (data.parsed_text) {
                lastParsedText = String(data.parsed_text);
            }
            // –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é: mPhotoWrap.style.display='block'; mPhotoImg.src = lastPhotoURL || mPhotoImg.src;

        } catch (e) {
            if (e?.name === 'AbortError') {
                const msg = String(e?.message || '');
                if (msg.includes('timeout')) alert('OCR: –∏—Å—Ç–µ–∫ —Ç–∞–π–º–∞—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
                else alert('–û—Ç–º–µ–Ω–µ–Ω–æ.');
            } else {
                alert(e?.message || '–û—à–∏–±–∫–∞ OCR-–∑–∞–ø—Ä–æ—Å–∞');
            }
        }
    });

    // init: –æ—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å¬ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (captureBtn) captureBtn.onclick = captureAndRecognize;

    // ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å–µ—Å—Å–∏–∏ =====
    async function checkShopSession() {
        try {
            const r = await fetch('/index.php?r=site/session-status', { credentials: 'include' });
            const res = await r.json();
            if (!res.ok) return;

            if (res.needPrompt && shopModal) {
                if (res.store)     shopStoreEl.value = res.store;
                if (res.category)  shopCatEl.value   = res.category;
                shopModal.show();
            } else {
                metaStore    = res.store     || metaStore;
                metaCategory = res.category  || metaCategory;
                scanRoot?.setAttribute('data-store', metaStore);
                scanRoot?.setAttribute('data-category', metaCategory);
            }
        } catch (e) { /* —Ç–∏—Ö–æ */ }
    }
    document.addEventListener('DOMContentLoaded', checkShopSession);

    // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    shopModalEl?.addEventListener('hidden.bs.modal', () => {
        metaStore    = scanRoot?.dataset.store    || metaStore;
        metaCategory = scanRoot?.dataset.category || metaCategory;
        updateScanTitle();
    });

    // –ù–∞—á–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Å–µ—Å—Å–∏—é (–∏–∑ –º–æ–¥–∞–ª–∫–∏ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞)
    shopBeginBtn && (shopBeginBtn.onclick = async () => {
        const store = (shopStoreEl.value || '').trim();
        const cat   = (shopCatEl.value || '').trim();
        if (!store) { shopStoreEl.focus(); return; }

        const csrf = getCsrf();
        const fd = new FormData();
        fd.append('store', store);
        fd.append('category', cat);

        try {
            const r = await fetch('/index.php?r=site/begin-ajax', {
                method: 'POST',
                headers: { 'X-CSRF-Token': csrf },
                body: fd,
                credentials: 'include'
            });
            const res = await r.json();
            if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é');

            metaStore    = res.store || store;
            metaCategory = res.category || cat;
            scanRoot?.setAttribute('data-store', metaStore);
            scanRoot?.setAttribute('data-category', metaCategory);
            updateScanTitle();
            shopModal?.hide();
        } catch (e) {
            alert(e.message);
        }
    });

})();
