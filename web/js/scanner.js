const video = document.getElementById('camera');
const canvas = document.createElement('canvas');
const startBtn = document.getElementById('start-scan');
const captureBtn = document.getElementById('capture');
const cameraWrapper = document.getElementById('camera-wrapper');

let stream = null;

// üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É (–∑–∞–¥–Ω—é—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
startBtn.onclick = async () => {
    try {
        stream = await navigator.mediaDevices.getUserMedia({
            video: { facingMode: { ideal: 'environment' } },
            audio: false
        });

        video.srcObject = stream;
        cameraWrapper.style.display = 'block';
    } catch (err) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–º–µ—Ä–µ: ' + err.message);
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã:', err);
    }
};

// üì∏ –°—Ñ–æ—Ç–∫–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
captureBtn.onclick = () => {
    if (!video.videoWidth || !video.videoHeight) {
        alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
        return;
    }

    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    canvas.toBlob(blob => {
        if (!blob) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
            return;
        }

        const formData = new FormData();
        formData.append('image', blob, 'scan.jpg');

        // üîê –ü–æ–ª—É—á–∞–µ–º CSRF-—Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        if (!csrfToken) {
            alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
            return;
        }

        fetch('/index.php?r=scan/upload', {
            method: 'POST',
            headers: {
                'X-CSRF-Token': csrfToken
            },
            body: formData
        })
            .then(async r => {
                const contentType = r.headers.get('content-type') || '';
                if (!contentType.includes('application/json')) {
                    const text = await r.text();
                    console.error('–û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏:', text);
                    throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
                }
                return r.json();
            })
            .then(res => {
                console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res);
                if (res.success) {
                    alert('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ' + res.text + '\n–°—É–º–º–∞: ' + res.amount);
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É');
                }
            })
            .catch(err => {
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
                console.error('–û—à–∏–±–∫–∞ fetch:', err);
            });
    }, 'image/jpeg');
};

// üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–ø–∏—Å—è—Ö
document.querySelectorAll('.entry-form').forEach(form => {
    const saveBtn = form.querySelector('.save-entry');
    if (!saveBtn) return;

    saveBtn.onclick = e => {
        e.preventDefault();
        const formData = new FormData(form);
        const id = form.dataset.id;

        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
        if (!csrfToken) {
            alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
            return;
        }

        fetch(`/index.php?r=scan/update&id=${id}`, {
            method: 'POST',
            headers: {
                'X-CSRF-Token': csrfToken
            },
            body: formData
        })
            .then(() => location.reload())
            .catch(err => {
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + err.message);
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
            });
    };
});
