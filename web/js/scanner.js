const video = document.getElementById('camera');
const canvas = document.createElement('canvas');
const startBtn = document.getElementById('start-scan');
const captureBtn = document.getElementById('capture');
const cameraWrapper = document.getElementById('camera-wrapper');

let stream = null;

// üöÄ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É (–∑–∞–¥–Ω—é—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
startBtn.onclick = async () => {
    try {
        stream = await navigator.mediaDevices.getUserMedia({
            video: { facingMode: { ideal: 'environment' } },
            audio: false
        });

        video.srcObject = stream;
        cameraWrapper.style.display = 'block';
    } catch (err) {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∫–∞–º–µ—Ä–µ: ' + err.message);
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã:', err);
    }
};

let scanBusy = false;
const btnTextEl = captureBtn.querySelector('.btn-text');
const btnSpinnerEl = captureBtn.querySelector('.spinner');

captureBtn.onclick = async () => {
    if (scanBusy) return;
    scanBusy = true;
    captureBtn.disabled = true;

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç
    btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
    btnSpinnerEl.style.display = 'inline-block';

    try {
        if (!video.videoWidth || !video.videoHeight) {
            alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
            return;
        }

        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // üñ§ –ß–ë + –ö–æ–Ω—Ç—Ä–∞—Å—Ç
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = imageData.data;
        for (let i = 0; i < data.length; i += 4) {
            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
            const bw = avg > 128 ? 255 : 0;
            data[i] = data[i + 1] = data[i + 2] = bw;
        }
        ctx.putImageData(imageData, 0, 0);

        // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞
        canvas.toBlob(blob => {
            if (!blob) {
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                return;
            }

            const formData = new FormData();
            formData.append('image', blob, 'scan.jpg');

            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            if (!csrfToken) {
                alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
                return;
            }
            const preview = document.getElementById('preview-image');
            preview.src = URL.createObjectURL(blob);

            fetch('/index.php?r=scan/upload', {
                method: 'POST',
                headers: {
                    'X-CSRF-Token': csrfToken
                },
                body: formData,
                credentials: 'include'
            })
                .then(async r => {
                    const contentType = r.headers.get('content-type') || '';
                    if (!contentType.includes('application/json')) {
                        const text = await r.text();
                        console.error('–û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏:', text);
                        throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
                    }
                    return r.json();
                })
                .then(res => {
                    console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res);
                    if (res.success) {
                        alert('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ' + res.text + '\n–°—É–º–º–∞: ' + res.amount);
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É');
                    }
                })
                .catch(err => {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
                    console.error('–û—à–∏–±–∫–∞ fetch:', err);
                })
                .finally(() => {
                    scanBusy = false;
                    captureBtn.disabled = false;
                    btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
                    btnSpinnerEl.style.display = 'none';
                });
        }, 'image/jpeg');

    } catch (err) {
        console.error(err);
        scanBusy = false;
        captureBtn.disabled = false;
        btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
        btnSpinnerEl.style.display = 'none';
    }
};

