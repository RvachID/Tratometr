// ===== DOM =====
const startBtn    = document.getElementById('start-scan');
const wrap        = document.getElementById('camera-wrapper');
const video       = document.getElementById('camera');
const captureBtn  = document.getElementById('capture');
const previewImg  = document.getElementById('preview-image'); // –ø—Ä–µ–≤—å—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π (–Ω–µ –≤ –º–æ–¥–∞–ª–∫–µ)

// —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–°—Ñ–æ—Ç–∫–∞—Ç—å" –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
const btnTextEl    = captureBtn.querySelector('.btn-text') || captureBtn; // fallback
const btnSpinnerEl = captureBtn.querySelector('.spinner');

// ===== –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ =====
const scanModalEl   = document.getElementById('scanModal');
const mAmountEl     = document.getElementById('m-amount');
const mQtyEl        = document.getElementById('m-qty');
const mQtyMinusEl   = document.getElementById('m-qty-minus');
const mQtyPlusEl    = document.getElementById('m-qty-plus');
const mNoteEl       = document.getElementById('m-note');
const mShowPhotoBtn = document.getElementById('m-show-photo');
const mPhotoWrap    = document.getElementById('m-photo-wrap');
const mPhotoImg     = document.getElementById('m-photo');
const mRetakeBtn    = document.getElementById('m-retake');
const mSaveBtn      = document.getElementById('m-save');

// Bootstrap modal (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω Bootstrap 5)
let bootstrapModal = scanModalEl ? new bootstrap.Modal(scanModalEl) : null;

// ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ =====
let currentStream = null;
let scanBusy = false;
let lastPhotoURL = null;        // blob URL –¥–ª—è —Ñ–æ—Ç–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –º–æ–¥–∞–ª–∫–µ)
let lastParsedText = '';        // ParsedText –æ—Ç OCR (–æ–ø—Ü. –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
function debounce(fn, ms) {
    let t;
    return function(...args) {
        clearTimeout(t);
        t = setTimeout(() => fn.apply(this, args), ms);
    };
}

function getCsrf() {
    return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
}

// ===== –ö–∞–º–µ—Ä–∞ =====
async function stopStream() {
    if (currentStream) {
        currentStream.getTracks().forEach(t => t.stop());
        currentStream = null;
    }
}

async function getStream(constraints) {
    return await navigator.mediaDevices.getUserMedia(constraints);
}

async function initCamera() {
    await stopStream();

    // –ø—Ä–æ–±—É–µ–º —Ç—ã–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
    const primary = { video: { facingMode: { ideal: 'environment' } }, audio: false };

    try {
        currentStream = await getStream(primary);
    } catch (e) {
        console.warn('environment camera failed, fallback to any camera:', e?.name, e?.message);
        currentStream = await getStream({ video: true, audio: false });
    }

    video.setAttribute('playsinline', 'true'); // iOS/Safari
    video.srcObject = currentStream;

    // –∂–¥—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ play()
    await new Promise((res) => {
        const h = () => { video.removeEventListener('loadedmetadata', h); res(); };
        if (video.readyState >= 1) res(); else video.addEventListener('loadedmetadata', h);
    });

    try { await video.play(); } catch (e) { console.warn('video.play blocked', e); }
}

// ===== –°–Ω–∏–º–æ–∫ + OCR (recognize) =====
async function captureAndRecognize() {
    if (scanBusy) return;
    scanBusy = true;
    captureBtn.disabled = true;

    // –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä/—Ç–µ–∫—Å—Ç
    if (btnSpinnerEl) btnSpinnerEl.style.display = 'inline-block';
    if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
    else captureBtn.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';

    try {
        if (!video.videoWidth || !video.videoHeight) {
            alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
            return;
        }

        // —Ä–∏—Å—É–µ–º –≤ –∫–∞–Ω–≤–∞—Å (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π)
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // –ß/–ë –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è)
        const img = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = img.data;
        for (let i = 0; i < data.length; i += 4) {
            const avg = (data[i] + data[i+1] + data[i+2]) / 3;
            const bw = avg > 128 ? 255 : 0;
            data[i] = data[i+1] = data[i+2] = bw;
        }
        ctx.putImageData(img, 0, 0);

        // –ø—Ä–µ–≤—å—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ), –Ω–æ —Ñ–æ—Ç–æ –≤ –º–æ–¥–∞–ª–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
        await new Promise((resolve) => {
            canvas.toBlob((blob) => {
                if (!blob) {
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                    resolve(null);
                    return;
                }

                // –æ–±–Ω–æ–≤–∏–º –ø—Ä–µ–≤—å—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
                const url = URL.createObjectURL(blob);
                previewImg.src = url;

                // —Å–æ—Ö—Ä–∞–Ω–∏–º URL –¥–ª—è –º–æ–¥–∞–ª–∫–∏ (–ø–æ–∫–∞–∂–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ)
                if (lastPhotoURL) URL.revokeObjectURL(lastPhotoURL);
                lastPhotoURL = url;

                const formData = new FormData();
                formData.append('image', blob, 'scan.jpg');

                const csrf = getCsrf();
                if (!csrf) {
                    alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
                    resolve(null);
                    return;
                }

                // –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç (–±–µ–∑ –∑–∞–ø–∏—Å–∏)
                fetch('/index.php?r=scan/recognize', {
                    method: 'POST',
                    headers: { 'X-CSRF-Token': csrf },
                    body: formData,
                    credentials: 'include'
                })
                    .then(async r => {
                        if (r.status === 429) {
                            throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OCR-–∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                        }
                        const ct = r.headers.get('content-type') || '';
                        if (!ct.includes('application/json')) {
                            const text = await r.text();
                            console.error('–û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏:', text);
                            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
                        }
                        return r.json();
                    })
                    .then(res => {
                        if (!res.success) {
                            throw new Error(res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É');
                        }

                        // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª–∫—É
                        mAmountEl.value = res.recognized_amount;
                        mQtyEl.value = 1;
                        mNoteEl.value = '';
                        mPhotoWrap.style.display = 'none';
                        lastParsedText = res.parsed_text || '';

                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
                        if (bootstrapModal) bootstrapModal.show();
                        resolve(true);
                    })
                    .catch(err => {
                        alert(err.message);
                        console.error('recognize error:', err);
                        resolve(false);
                    });
            }, 'image/jpeg', 0.9);
        });

    } finally {
        scanBusy = false;
        captureBtn.disabled = false;
        if (btnSpinnerEl) btnSpinnerEl.style.display = 'none';
        if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = 'üì∏ –°—Ñ–æ—Ç–∫–∞—Ç—å';
        else captureBtn.textContent = 'üì∏ –°—Ñ–æ—Ç–∫–∞—Ç—å';
    }
}

// ===== –ú–æ–¥–∞–ª–∫–∞: –∫–Ω–æ–ø–∫–∏ –∏ –ª–æ–≥–∏–∫–∞ =====
if (mQtyMinusEl && mQtyPlusEl && mQtyEl) {
    mQtyMinusEl.onclick = () => {
        let v = parseFloat(mQtyEl.value || '1');
        v = Math.max(0, v - 1);
        mQtyEl.value = (v % 1 === 0) ? v.toFixed(0) : v.toFixed(3);
    };
    mQtyPlusEl.onclick = () => {
        let v = parseFloat(mQtyEl.value || '1');
        v = v + 1;
        mQtyEl.value = v.toFixed(0);
    };
}

if (mShowPhotoBtn && mPhotoWrap && mPhotoImg) {
    mShowPhotoBtn.onclick = (e) => {
        e.preventDefault();
        if (mPhotoWrap.style.display === 'none') {
            mPhotoWrap.style.display = 'block';
            mPhotoImg.src = lastPhotoURL || '';
            mShowPhotoBtn.textContent = '–°–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ';
        } else {
            mPhotoWrap.style.display = 'none';
            mShowPhotoBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ';
        }
    };
}

if (mRetakeBtn) {
    mRetakeBtn.onclick = () => {
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –∫–∞–º–µ—Ä—ã (–Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)
        if (bootstrapModal) bootstrapModal.hide();
    };
}

if (mSaveBtn) {
    mSaveBtn.onclick = async () => {
        const csrf = getCsrf();
        const fd = new FormData();
        fd.append('amount', mAmountEl.value);
        fd.append('qty', mQtyEl.value);
        fd.append('note', mNoteEl.value);
        fd.append('parsed_text', lastParsedText);

        try {
            const r = await fetch('/index.php?r=scan/store', {
                method: 'POST',
                headers: { 'X-CSRF-Token': csrf },
                body: fd,
                credentials: 'include',
            });
            const ct = r.headers.get('content-type') || '';
            if (!ct.includes('application/json')) {
                const text = await r.text();
                console.error('–û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏:', text);
                throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
            }
            const res = await r.json();
            if (!res.success) throw new Error(res.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
            if (res.entry) addEntryToTop(res.entry);
            if (typeof res.total !== 'undefined') updateTotal(res.total);

            if (bootstrapModal) bootstrapModal.hide();
        } catch (e) {
            alert(e.message);
            console.error('store error:', e);
        }
    };
}

// ===== –ì–ª–∞–≤–Ω–∞—è: –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ +/- –¥–ª—è qty =====
function bindEntryRow(container) {
    const form = container.querySelector('form.entry-form');
    if (!form) return;

    const id       = form.dataset.id;
    const amountEl = form.querySelector('input[name="amount"]');
    const qtyEl    = form.querySelector('input[name="qty"]');
    const delBtn   = form.querySelector('.delete-entry');

    // –û–±–µ—Ä–Ω—ë–º qty –≤ input-group —Å +/- –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
    let minusBtn = form.querySelector('.qty-minus');
    let plusBtn  = form.querySelector('.qty-plus');
    if (!minusBtn || !plusBtn) {
        const parent = qtyEl.parentElement;
        const group  = document.createElement('div');
        group.className = 'input-group mb-1';

        minusBtn = document.createElement('button');
        minusBtn.type = 'button';
        minusBtn.className = 'btn btn-outline-secondary qty-minus';
        minusBtn.textContent = '‚Äì';

        plusBtn = document.createElement('button');
        plusBtn.type = 'button';
        plusBtn.className = 'btn btn-outline-secondary qty-plus';
        plusBtn.textContent = '+';

        qtyEl.classList.add('form-control', 'text-center');

        parent.insertBefore(group, qtyEl);
        group.appendChild(minusBtn);
        group.appendChild(qtyEl);
        group.appendChild(plusBtn);
    }

    const csrf = getCsrf();

    const doSave = async () => {
        const fd = new FormData();
        fd.append('amount', amountEl.value);
        fd.append('qty', qtyEl.value);

        try {
            const r = await fetch(`index.php?r=scan/update&id=${id}`, {
                method: 'POST',
                headers: { 'X-CSRF-Token': csrf },
                body: fd,
                credentials: 'include',
            });
            const ct = r.headers.get('content-type') || '';
            if (!ct.includes('application/json')) return;
            const res = await r.json();
            if (res && res.success && typeof res.total !== 'undefined') {
                updateTotal(res.total);
            }
        } catch (e) {
            console.error('autosave error', e);
        }
    };
    const debouncedSave = debounce(doSave, 400);

    amountEl.addEventListener('input', debouncedSave);
    qtyEl.addEventListener('input', debouncedSave);

    minusBtn.addEventListener('click', () => {
        let v = parseFloat(qtyEl.value || '1');
        v = Math.max(0, v - 1);
        qtyEl.value = (v % 1 === 0) ? v.toFixed(0) : v.toFixed(3);
        debouncedSave();
    });

    plusBtn.addEventListener('click', () => {
        let v = parseFloat(qtyEl.value || '1');
        v = v + 1;
        qtyEl.value = v.toFixed(0);
        debouncedSave();
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ
    if (delBtn) {
        delBtn.onclick = async () => {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?')) return;
            try {
                const r = await fetch(`index.php?r=scan/delete&id=${id}`, {
                    method: 'POST',
                    headers: { 'X-CSRF-Token': csrf },
                    credentials: 'include',
                });
                const res = await r.json();
                if (res.success) {
                    container.remove();
                    if (typeof res.total !== 'undefined') updateTotal(res.total);
                } else {
                    alert(res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å');
                }
            } catch (e) {
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + e.message);
            }
        };
    }

    // —Å–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—Å—Ç—å
    const saveBtn = form.querySelector('.save-entry');
    if (saveBtn) saveBtn.classList.add('d-none');
}


function addEntryToTop(entry) {
    const listWrap = document.querySelector('.mt-3.text-start');
    if (!listWrap) return;

    const div = document.createElement('div');
    div.className = 'border p-2 mb-2';
    div.innerHTML = `
    <form class="entry-form" data-id="${entry.id}">
      –°—É–º–º–∞:
      <input type="number" step="0.01" name="amount" value="${entry.amount}" class="form-control mb-1">

      <input type="hidden" name="category" value="${entry.category ?? ''}">

      –ö–æ–ª-–≤–æ:
      <input type="number" step="0.001" name="qty" value="${entry.qty}" class="form-control mb-1">

      <div class="d-flex gap-2">
        <button class="btn btn-sm btn-outline-danger delete-entry" type="button">üóë –£–¥–∞–ª–∏—Ç—å</button>
        <button class="btn btn-sm btn-outline-success save-entry d-none" type="button">üíæ</button>
      </div>
    </form>
  `;
    listWrap.prepend(div);
    bindEntryRow(div);
}


function updateTotal(total) {
    const el = document.querySelector('.mt-3 h5 strong');
    if (el) el.textContent = Number(total).toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}


// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π =====
document.querySelectorAll('.entry-form').forEach(f => bindEntryRow(f.closest('.border')));

// ===== –°–æ–±—ã—Ç–∏—è =====
startBtn.onclick = async () => {
    wrap.style.display = 'block';
    try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        await initCamera();
    } catch (e) {
        console.error('initCamera error:', e);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É: ' + (e?.message || e));
    }
};

captureBtn.onclick = captureAndRecognize;
