// ===== DOM =====
const startBtn   = document.getElementById('start-scan');
const wrap       = document.getElementById('camera-wrapper');
const video      = document.getElementById('camera');
const captureBtn = document.getElementById('capture');
const previewImg = document.getElementById('preview-image');

// —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–°—Ñ–æ—Ç–∫–∞—Ç—å" –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
const btnTextEl    = captureBtn.querySelector('.btn-text') || captureBtn; // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ .btn-text –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏
const btnSpinnerEl = captureBtn.querySelector('.spinner');

// ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ =====
let currentStream = null;
let scanBusy = false;

// ===== –ö–∞–º–µ—Ä–∞ =====
async function stopStream() {
    if (currentStream) {
        currentStream.getTracks().forEach(t => t.stop());
        currentStream = null;
    }
}

async function getStream(constraints) {
    return await navigator.mediaDevices.getUserMedia(constraints);
}

async function initCamera() {
    await stopStream();

    // –ø—Ä–æ–±—É–µ–º —Ç—ã–ª—å–Ω—É—é –∫–∞–º–µ—Ä—É
    const primary = { video: { facingMode: { ideal: 'environment' } }, audio: false };

    try {
        currentStream = await getStream(primary);
    } catch (e) {
        console.warn('environment camera failed, fallback to any camera:', e?.name, e?.message);
        currentStream = await getStream({ video: true, audio: false });
    }

    video.setAttribute('playsinline', 'true'); // –¥–ª—è iOS/Safari
    video.srcObject = currentStream;

    // –∂–¥—ë–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ play()
    await new Promise((res) => {
        const h = () => { video.removeEventListener('loadedmetadata', h); res(); };
        if (video.readyState >= 1) res(); else video.addEventListener('loadedmetadata', h);
    });

    try { await video.play(); } catch (e) { console.warn('video.play blocked', e); }
}

// ===== –°–Ω–∏–º–æ–∫ + –æ—Ç–ø—Ä–∞–≤–∫–∞ =====
async function captureAndSend() {
    if (scanBusy) return;
    scanBusy = true;
    captureBtn.disabled = true;

    // –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä/—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ç–∫–∞
    if (btnSpinnerEl) btnSpinnerEl.style.display = 'inline-block';
    if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
    else captureBtn.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';

    try {
        if (!video.videoWidth || !video.videoHeight) {
            alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
            return;
        }

        // —Ä–∏—Å—É–µ–º –≤ –∫–∞–Ω–≤–∞—Å (—Å–æ–∑–¥–∞—ë–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // –ß/–ë –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è)
        const img = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = img.data;
        for (let i = 0; i < data.length; i += 4) {
            const avg = (data[i] + data[i+1] + data[i+2]) / 3;
            const bw = avg > 128 ? 255 : 0;
            data[i] = data[i+1] = data[i+2] = bw;
        }
        ctx.putImageData(img, 0, 0);

        // –ø—Ä–µ–≤—å—é
        await new Promise((resolve) => {
            canvas.toBlob((blob) => {
                if (!blob) {
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                    resolve(null);
                    return;
                }
                const url = URL.createObjectURL(blob);
                previewImg.src = url;

                const formData = new FormData();
                formData.append('image', blob, 'scan.jpg');

                const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
                if (!csrfToken) {
                    alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
                    resolve(null);
                    return;
                }

                fetch('/index.php?r=scan/upload', {
                    method: 'POST',
                    headers: { 'X-CSRF-Token': csrfToken },
                    body: formData,
                    credentials: 'include'
                })
                    .then(async r => {
                        const ct = r.headers.get('content-type') || '';
                        if (!ct.includes('application/json')) {
                            const text = await r.text();
                            console.error('–û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏:', text);
                            throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON. –°–º. –∫–æ–Ω—Å–æ–ª—å.');
                        }
                        return r.json();
                    })
                    .then(res => {
                        console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', res);
                        if (res.success) {
                            alert('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ' + res.text + '\n–°—É–º–º–∞: ' + res.amount);
                            location.reload();
                        } else {
                            alert(res.error || '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É');
                        }
                        resolve(true);
                    })
                    .catch(err => {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ' + err.message);
                        console.error('–û—à–∏–±–∫–∞ fetch:', err);
                        resolve(false);
                    });
            }, 'image/jpeg', 0.9);
        });

    } finally {
        scanBusy = false;
        captureBtn.disabled = false;
        if (btnSpinnerEl) btnSpinnerEl.style.display = 'none';
        if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = 'üì∏ –°—Ñ–æ—Ç–∫–∞—Ç—å';
        else captureBtn.textContent = 'üì∏ –°—Ñ–æ—Ç–∫–∞—Ç—å';
    }
}

// ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π =====
function bindEntrySaves() {
    document.querySelectorAll('.entry-form').forEach(form => {
        const saveBtn = form.querySelector('.save-entry');
        if (!saveBtn) return;

        saveBtn.onclick = (e) => {
            e.preventDefault();
            const formData = new FormData(form);
            const id = form.dataset.id;

            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
            if (!csrfToken) {
                alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                console.error('CSRF-—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <meta>');
                return;
            }

            fetch(`index.php?r=scan/update&id=${id}`, {
                method: 'POST',
                headers: { 'X-CSRF-Token': csrfToken },
                body: formData
            })
                .then(() => location.reload())
                .catch(err => {
                    alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + err.message);
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', err);
                });
        };
    });
}

// ===== –°–æ–±—ã—Ç–∏—è =====
startBtn.onclick = async () => {
    wrap.style.display = 'block';
    try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            return;
        }
        await initCamera();
    } catch (e) {
        console.error('initCamera error:', e);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É: ' + (e?.message || e));
    }
};

captureBtn.onclick = captureAndSend;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
bindEntrySaves();
