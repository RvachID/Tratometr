// ===== DOM =====
const startBtn = document.getElementById('start-scan');
const wrap = document.getElementById('camera-wrapper');
const video = document.getElementById('camera');
const captureBtn = document.getElementById('capture');
const previewImg = document.getElementById('preview-image'); // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ—à–∏–±–∫–µ
const manualBtn = document.getElementById('manual-add');

// —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏ "–°—Ñ–æ—Ç–∫–∞—Ç—å" –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞
const btnTextEl = captureBtn.querySelector('.btn-text') || captureBtn;
const btnSpinnerEl = captureBtn.querySelector('.spinner');

// ===== –ú–æ–¥–∞–ª–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ =====
const scanModalEl = document.getElementById('scanModal');
const mAmountEl = document.getElementById('m-amount');
const mQtyEl = document.getElementById('m-qty');
const mQtyMinusEl = document.getElementById('m-qty-minus');
const mQtyPlusEl = document.getElementById('m-qty-plus');
const mNoteEl = document.getElementById('m-note');
const mShowPhotoBtn = document.getElementById('m-show-photo');
const mPhotoWrap = document.getElementById('m-photo-wrap');
const mPhotoImg = document.getElementById('m-photo');
const mRetakeBtn = document.getElementById('m-retake');
const mSaveBtn = document.getElementById('m-save');

let bootstrapModal = scanModalEl ? new bootstrap.Modal(scanModalEl) : null;

// ===== –°–æ—Å—Ç–æ—è–Ω–∏–µ =====
let currentStream = null;
let scanBusy = false;
let lastPhotoURL = null;
let lastParsedText = '';
let wasSaved = false; // —á—Ç–æ–±—ã –ø–æ –∑–∞–∫—Ä—ã—Ç–∏—é –º–æ–¥–∞–ª–∫–∏ –∑–Ω–∞—Ç—å, —Å–∫—Ä—ã–≤–∞—Ç—å –ª–∏ –∫–∞–º–µ—Ä—É
// === –¢—É–º–±–ª–µ—Ä –∫–∞–º–µ—Ä—ã + –∫–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ===
let cameraActive = false;
const startScanBtn = document.getElementById('start-scan');
const manualAddBtn = document.getElementById('manual-add');

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã
function startCamera() {
    const videoEl = document.getElementById('video');
    if (!videoEl) return;

    navigator.mediaDevices.getUserMedia({video: true}).then(stream => {
        window.currentStream = stream;
        videoEl.srcObject = stream;
        videoEl.style.display = 'block';
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–º–µ—Ä—ã', err);
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã
function stopCamera() {
    if (window.currentStream) {
        window.currentStream.getTracks().forEach(track => track.stop());
        window.currentStream = null;
    }
    const videoEl = document.getElementById('video');
    if (videoEl) videoEl.style.display = 'none';
}

// –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫–∏ –∫–∞–º–µ—Ä—ã
startBtn.onclick = async () => {
    cameraActive = !!currentStream;
    if (!cameraActive) {
        // –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
        wrap.style.display = 'block';
        try {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                alert('–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
                return;
            }
            await initCamera(); // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            cameraActive = true;
            startBtn.textContent = '‚úñ –ó–∞–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
            manualBtn?.classList.add('d-none'); // —Å–∫—Ä—ã—Ç—å "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"

        } catch (e) {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É: ' + (e?.message || e));
            wrap.style.display = 'none';
            cameraActive = false;
            startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
            manualBtn?.classList.remove('d-none'); // –ø–æ–∫–∞–∑–∞—Ç—å "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é" –æ–±—Ä–∞—Ç–Ω–æ
        }
    } else {
        // –∑–∞–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
        await stopStream();             // –≥–∞—Å–∏–º —Å—Ç—Ä–∏–º
        wrap.style.display = 'none';    // –ø—Ä—è—á–µ–º –±–ª–æ–∫
        cameraActive = false;
        startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
        manualBtn?.classList.remove('d-none'); // –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–∏ —Ñ–µ–π–ª–µ
    }
};

// –†—É—á–Ω–æ–π –≤–≤–æ–¥ (–±–µ–∑ –∫–∞–º–µ—Ä—ã)
manualBtn.onclick = async () => {
    // –µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º
    if (cameraActive) {
        await stopStream();
        wrap.style.display = 'none';
        cameraActive = false;
        startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
    }
    // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏
    mAmountEl.value = fmt2(0);
    mQtyEl.value = 1;
    mNoteEl.value = '';
    lastParsedText = '';
    mPhotoWrap.style.display = 'none';
    if (mShowPhotoBtn) mShowPhotoBtn.style.display = 'none';
    resetPhotoPreview();
    bootstrapModal?.show();
};

// ===== –£—Ç–∏–ª—Å—ã =====
const getCsrf = () => document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
const debounce = (fn, ms) => {
    let t;
    return (...a) => {
        clearTimeout(t);
        t = setTimeout(() => fn(...a), ms);
    }
};
const fmt2 = (x) => Number(x || 0).toFixed(2);

//–í—ã–≤–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
function renderNote(container, note) {
    // 1) –Ω–∞—Ö–æ–¥–∏–º –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–¥ –±–ª–æ–∫–æ–º –∫–Ω–æ–ø–æ–∫
    let slot = container.querySelector('.entry-note-wrap');
    if (!slot) {
        slot = document.createElement('div');
        slot.className = 'entry-note-wrap';
        slot.style.marginTop = '6px';
        const btns = container.querySelector('.d-flex.gap-2.mt-2'); // –±–ª–æ–∫ –∫–Ω–æ–ø–æ–∫
        container.insertBefore(slot, btns ?? null); // –≤—Å—Ç–∞–≤–ª—è–µ–º –ü–ï–†–ï–î –∫–Ω–æ–ø–∫–∞–º–∏
    }

    // 2) —á–∏—Å—Ç–∏–º —Å–ª–æ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º
    slot.innerHTML = '';
    if (!note) { slot.style.display = 'none'; return; }
    slot.style.display = '';

    // 3) —Å–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ—Ç–∫–∏ + "–ï—â—ë/–°–≤–µ—Ä–Ω—É—Ç—å"
    const TEXT = document.createElement('div');
    TEXT.className = 'entry-note-text';
    TEXT.textContent = note;
    TEXT.style.display = '-webkit-box';
    TEXT.style.webkitBoxOrient = 'vertical';
    TEXT.style.webkitLineClamp = '2';
    TEXT.style.overflow = 'hidden';
    TEXT.style.wordBreak = 'break-word';
    TEXT.style.color = '#555';

    const TOGGLE = document.createElement('button');
    TOGGLE.type = 'button';
    TOGGLE.className = 'entry-note-toggle';
    TOGGLE.textContent = '–ï—â—ë';
    TOGGLE.style.background = 'none';
    TOGGLE.style.border = 'none';
    TOGGLE.style.padding = '0';
    TOGGLE.style.margin = '4px 0 0 0';
    TOGGLE.style.color = '#0d6efd';
    TOGGLE.style.fontSize = '0.9rem';
    TOGGLE.style.cursor = 'pointer';
    TOGGLE.style.display = (note.length > 60) ? 'inline-block' : 'none';

    let expanded = false;
    TOGGLE.onclick = () => {
        expanded = !expanded;
        if (expanded) {
            TEXT.style.webkitLineClamp = 'unset';
            TEXT.style.display = 'block';
            TOGGLE.textContent = '–°–≤–µ—Ä–Ω—É—Ç—å';
        } else {
            TEXT.style.display = '-webkit-box';
            TEXT.style.webkitLineClamp = '2';
            TOGGLE.textContent = '–ï—â—ë';
        }
    };

    slot.appendChild(TEXT);
    slot.appendChild(TOGGLE);
}


// ===== –ö–∞–º–µ—Ä–∞ =====
async function stopStream() {
    if (currentStream) {
        currentStream.getTracks().forEach(t => t.stop());
        currentStream = null;
    }
}

async function getStream(c) {
    return await navigator.mediaDevices.getUserMedia(c);
}

async function initCamera() {
    await stopStream();
    const primary = {video: {facingMode: {ideal: 'environment'}}, audio: false};
    try {
        currentStream = await getStream(primary);
    } catch {
        currentStream = await getStream({video: true, audio: false});
    }
    video.setAttribute('playsinline', 'true');
    video.srcObject = currentStream;
    await new Promise(res => {
        const h = () => {
            video.removeEventListener('loadedmetadata', h);
            res();
        };
        if (video.readyState >= 1) res(); else video.addEventListener('loadedmetadata', h);
    });
    try {
        await video.play();
    } catch {
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏: –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚Äî –ø—Ä—è—á–µ–º –∫–∞–º–µ—Ä—É –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–∏–º
scanModalEl?.addEventListener('hidden.bs.modal', async () => {
    if (mShowPhotoBtn) mShowPhotoBtn.style.display = '';
    resetPhotoPreview();
    if (wasSaved) {
        wrap.style.display = 'none';
        await stopStream();
        cameraActive = false;
        wasSaved = false;

        startBtn.textContent = 'üì∑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É';
        manualBtn?.classList.remove('d-none');
    }
});

// ===== –°–Ω–∏–º–æ–∫ + OCR =====
async function captureAndRecognize() {
    if (scanBusy) return;
    scanBusy = true;
    captureBtn.disabled = true;
    if (btnSpinnerEl) btnSpinnerEl.style.display = 'inline-block';
    if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';
    else captureBtn.textContent = '–°–∫–∞–Ω–∏—Ä—É–µ–º‚Ä¶';

    try {
        if (!video.videoWidth || !video.videoHeight) {
            alert('–ö–∞–º–µ—Ä–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞');
            return;
        }

        const canvas = document.createElement('canvas');
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

        // –ø—Ä–æ—Å—Ç–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        const img = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = img.data;
        for (let i = 0; i < data.length; i += 4) {
            const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
            const bw = avg > 128 ? 255 : 0;
            data[i] = data[i + 1] = data[i + 2] = bw;
        }
        ctx.putImageData(img, 0, 0);

        await new Promise((resolve) => {
            canvas.toBlob((blob) => {
                try {
                    if (!blob) {
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
                        return resolve(false);
                    }

                    // —Å–æ–∑–¥–∞—ë–º blob-url, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ–∫–∞–∂–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ/–ø—Ä–∏ –æ—à–∏–±–∫–µ)
                    if (lastPhotoURL) URL.revokeObjectURL(lastPhotoURL);
                    lastPhotoURL = URL.createObjectURL(blob);

                    const formData = new FormData();
                    formData.append('image', blob, 'scan.jpg');

                    const csrf = getCsrf();
                    if (!csrf) {
                        alert('CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        return resolve(false);
                    }

                    fetch('/index.php?r=scan/recognize', {
                        method: 'POST', headers: {'X-CSRF-Token': csrf}, body: formData, credentials: 'include'
                    })
                        .then(async r => {
                            if (r.status === 429) throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OCR-–∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                            const ct = r.headers.get('content-type') || '';
                            if (!ct.includes('application/json')) {
                                throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON.');
                            }
                            return r.json();
                        })
                        .then(res => {
                            if (!res.success) {
                                // –µ—Å–ª–∏ –∏–º–µ–Ω–Ω–æ —Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ ‚Äî –ø–æ–∫–∞–∂–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                                const msg = (res.error || '').toLowerCase();
                                if (previewImg && (msg.includes('–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω—É') || msg.includes('—Ü–µ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞') || res.reason === 'no_amount')) {
                                    previewImg.src = lastPhotoURL;
                                }
                                throw new Error(res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–µ–Ω—É');
                            }
                            if (mShowPhotoBtn) mShowPhotoBtn.style.display = '';
                            // –∑–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥–∞–ª–∫—É
                            mAmountEl.value = fmt2(res.recognized_amount);
                            mQtyEl.value = 1;
                            mNoteEl.value = '';
                            mPhotoWrap.style.display = 'none';
                            lastParsedText = res.parsed_text || '';
                            resetPhotoPreview();
                            bootstrapModal?.show();
                            resolve(true);
                        })
                        .catch(err => {
                            alert(err.message);
                            resolve(false);
                        });

                } catch (e) {
                    resolve(false);
                }
            }, 'image/jpeg', 0.9);
        });

    } finally {
        scanBusy = false;
        captureBtn.disabled = false;
        if (btnSpinnerEl) btnSpinnerEl.style.display = 'none';
        if (btnTextEl && btnTextEl !== captureBtn) btnTextEl.textContent = 'üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
        else captureBtn.textContent = 'üì∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å';
    }
}

// ===== –ú–æ–¥–∞–ª–∫–∞: –∫–Ω–æ–ø–∫–∏ =====
if (mQtyMinusEl && mQtyPlusEl && mQtyEl) {
    mQtyMinusEl.onclick = () => {
        let v = parseFloat(mQtyEl.value || '1');
        v = Math.max(0, v - 1);
        mQtyEl.value = (v % 1 === 0) ? v.toFixed(0) : v.toFixed(3);
    };
    mQtyPlusEl.onclick = () => {
        let v = parseFloat(mQtyEl.value || '1');
        v = v + 1;
        mQtyEl.value = v.toFixed(0);
    };
}
if (mAmountEl) {
    // —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ –≤–∏–¥–∞ 12.00
    mAmountEl.addEventListener('blur', () => {
        mAmountEl.value = fmt2(mAmountEl.value);
    });
}

if (mShowPhotoBtn && mPhotoWrap && mPhotoImg) {
    mShowPhotoBtn.onclick = (e) => {
        e.preventDefault();
        const isHidden = mPhotoWrap.style.display !== 'block';
        if (isHidden) {
            mPhotoWrap.style.display = 'block';
            mPhotoImg.src = lastPhotoURL || '';
            mShowPhotoBtn.textContent = '–°–∫—Ä—ã—Ç—å —Å–∫–∞–Ω';
        } else {
            mPhotoWrap.style.display = 'none';
            mShowPhotoBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞–Ω';
             mPhotoImg.src = '';
        }
    };
}

if (mRetakeBtn) {
    mRetakeBtn.onclick = () => {
        bootstrapModal?.hide(); /* –∫–∞–º–µ—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–π */
    };
}
if (mSaveBtn) {
    mSaveBtn.onclick = async () => {
        const csrf = getCsrf();
        const fd = new FormData();
        fd.append('amount', mAmountEl.value);
        fd.append('qty', mQtyEl.value);
        fd.append('note', mNoteEl.value);
        fd.append('parsed_text', lastParsedText);

        try {
            const r = await fetch('/index.php?r=scan/store', {
                method: 'POST', headers: {'X-CSRF-Token': csrf}, body: fd, credentials: 'include'
            });
            const ct = r.headers.get('content-type') || '';
            if (!ct.includes('application/json')) throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON.');
            const res = await r.json();
            if (!res.success) throw new Error(res.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');

            if (res.entry) addEntryToTop(res.entry);
            if (typeof res.total !== 'undefined') updateTotal(res.total);

            wasSaved = true;             // —Ñ–ª–∞–≥: –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ —Å–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É
            bootstrapModal?.hide();

            // –æ—á–∏—Å—Ç–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blob-url (–Ω–µ –æ–±—è–∑., –Ω–æ —á—Ç–æ–±—ã –Ω–µ –∫–æ–ø–∏—Ç—å)
            if (lastPhotoURL) {
                URL.revokeObjectURL(lastPhotoURL);
                lastPhotoURL = null;
            }

        } catch (e) {
            alert(e.message);
        }
    };
}

// ===== –ì–ª–∞–≤–Ω–∞—è: –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ +/- –¥–ª—è qty =====
function bindEntryRow(container) {
    const form = container.querySelector('form.entry-form');
    if (!form) return;

// –ü–æ–∫–∞–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–¥–∞–ª note —á–µ—Ä–µ–∑ hidden)
    const noteInput = form.querySelector('input[name="note"]');
    const noteVal = noteInput ? (noteInput.value || '').trim() : '';
    if (noteVal) renderNote(container, noteVal);

    const id = form.dataset.id;
    const amountEl = form.querySelector('input[name="amount"]');
    const qtyEl = form.querySelector('input[name="qty"]');
    const delBtn = form.querySelector('.delete-entry');

    // –ø—Ä–∏–≤–µ—Å—Ç–∏ —Ü–µ–Ω—É –∫ 2 –∑–Ω–∞–∫–∞–º –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–µ
    if (amountEl) amountEl.value = fmt2(amountEl.value);
    amountEl?.addEventListener('blur', () => {
        amountEl.value = fmt2(amountEl.value);
    });

    // –í—Å—Ç–∞–≤–∏–º +/- –¥–ª—è qty –µ—Å–ª–∏ –Ω–µ—Ç
    let minusBtn = form.querySelector('.qty-minus');
    let plusBtn = form.querySelector('.qty-plus');
    if (!minusBtn || !plusBtn) {
        const parent = qtyEl.parentElement;
        const group = document.createElement('div');
        group.className = 'input-group mb-1';

        minusBtn = document.createElement('button');
        minusBtn.type = 'button';
        minusBtn.className = 'btn btn-outline-secondary qty-minus';
        minusBtn.textContent = '‚Äì';

        plusBtn = document.createElement('button');
        plusBtn.type = 'button';
        plusBtn.className = 'btn btn-outline-secondary qty-plus';
        plusBtn.textContent = '+';

        qtyEl.classList.add('form-control', 'text-center');

        parent.insertBefore(group, qtyEl);
        group.appendChild(minusBtn);
        group.appendChild(qtyEl);
        group.appendChild(plusBtn);
    }

    const csrf = getCsrf();

    const doSave = async () => {
        const fd = new FormData();
        fd.append('amount', amountEl.value);
        fd.append('qty', qtyEl.value);
        try {
            const r = await fetch(`index.php?r=scan/update&id=${id}`, {
                method: 'POST', headers: {'X-CSRF-Token': csrf}, body: fd, credentials: 'include'
            });
            const ct = r.headers.get('content-type') || '';
            if (!ct.includes('application/json')) return;
            const res = await r.json();
            if (res?.success && typeof res.total !== 'undefined') updateTotal(res.total);
        } catch (e) {
            console.error('autosave error', e);
        }
    };
    const debouncedSave = debounce(doSave, 400);

    amountEl.addEventListener('input', debouncedSave);
    qtyEl.addEventListener('input', debouncedSave);

    minusBtn.addEventListener('click', () => {
        let v = parseFloat(qtyEl.value || '1');
        v = Math.max(0, v - 1);
        qtyEl.value = (v % 1 === 0) ? v.toFixed(0) : v.toFixed(3);
        debouncedSave();
    });
    plusBtn.addEventListener('click', () => {
        let v = parseFloat(qtyEl.value || '1');
        v = v + 1;
        qtyEl.value = v.toFixed(0);
        debouncedSave();
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ
    if (delBtn) {
        delBtn.onclick = async () => {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?')) return;
            try {
                const r = await fetch(`index.php?r=scan/delete&id=${id}`, {
                    method: 'POST', headers: {'X-CSRF-Token': csrf}, credentials: 'include'
                });
                const res = await r.json();
                if (res.success) {
                    container.remove();
                    if (typeof res.total !== 'undefined') updateTotal(res.total);
                } else {
                    alert(res.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å');
                }
            } catch (e) {
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + e.message);
            }
        };
    }

    // —Å–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    form.querySelector('.save-entry')?.classList.add('d-none');
}

function addEntryToTop(entry) {
    const listWrap = document.querySelector('.mt-3.text-start');
    if (!listWrap) return;

    const div = document.createElement('div');
    div.className = 'border p-2 mb-2';
    div.innerHTML = `
    <form class="entry-form" data-id="${entry.id}">
      –¶–µ–Ω–∞:
      <input type="number" step="0.01" name="amount" value="${fmt2(entry.amount)}" class="form-control mb-1">

      <input type="hidden" name="category" value="${entry.category ?? ''}">
      <input type="hidden" name="note" value="${(entry.note ?? '').replace(/"/g,'&quot;')}">

      –®—Ç—É–∫–∏ –∏–ª–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã:
      <input type="number" step="0.001" name="qty" value="${entry.qty}" class="form-control mb-1">

      <div class="d-flex gap-2">
        <button class="btn btn-sm btn-outline-danger delete-entry" type="button">üóë –£–¥–∞–ª–∏—Ç—å</button>
        <button class="btn btn-sm btn-outline-success save-entry d-none" type="button">üíæ</button>
      </div>
    </form>
  `;
    listWrap.prepend(div);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    bindEntryRow(div);

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const noteVal = (entry.note ?? '').trim();
    if (noteVal) renderNote(div, noteVal);
}


function updateTotal(total) {
    const el = document.querySelector('.mt-3 h5 strong');
    if (el) el.textContent = Number(total).toLocaleString('ru-RU', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    });
}

// ===== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =====
document.querySelectorAll('.entry-form').forEach(f => bindEntryRow(f.closest('.border')));

captureBtn.onclick = captureAndRecognize;

function resetPhotoPreview() {
    if (mPhotoWrap) mPhotoWrap.style.display = 'none';
    if (mShowPhotoBtn) mShowPhotoBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∞–Ω';
    if (mPhotoImg) mPhotoImg.src = ''; // –Ω–µ –¥–µ—Ä–∂–∏–º —Å—Ç–∞—Ä—ã–π –∫–∞–¥—Ä
}